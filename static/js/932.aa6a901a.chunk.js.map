{"version":3,"file":"static/js/932.aa6a901a.chunk.js","mappings":"yKACA,EAAwB,yBAAxB,EAAoE,oCCApE,GAAgB,wBAA0B,4C,gDCapCA,GAAcC,EAAAA,EAAAA,IAAiB,IAyC9B,IAAMC,GAAiBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,SAA/BD,EAtC9B,YAA4E,IAAxDE,EAAuD,EAAvDA,aAAcC,EAAyC,EAAzCA,MAChC,OACE,kBAAMC,SAAUF,EAAhB,WACE,gBAAKG,UAAWC,EAAAA,iBAAhB,UACE,SAACC,EAAA,EAAD,CACEC,KAAK,QACLC,YAAa,QACbC,UAAWC,EAAAA,GACXC,KAAM,QACNC,SAAU,CAACC,EAAAA,GAAUjB,QAGzB,gBAAKQ,UAAWC,EAAAA,oBAAhB,UACE,SAACC,EAAA,EAAD,CACEC,KAAK,WACLC,YAAa,WACbC,UAAWC,EAAAA,GACXC,KAAM,WACNC,SAAU,CAACC,EAAAA,GAAUjB,QAGzB,iBAAKQ,UAAWC,EAAAA,sBAAhB,WACE,SAACC,EAAA,EAAD,CACEC,KAAK,WACLE,UAAW,QACXE,KAAM,gBAER,6CAEDT,IAAS,gBAAKE,UAAWC,EAAAA,wBAAhB,SAA4CH,KACtD,gBAAKE,UAAWC,EAAAA,kBAAhB,UACE,8C,4BCTR,IAKaS,GAAYC,EAAAA,EAAAA,KALD,SAACC,GAAD,MAA6C,CACnEC,OAAQD,EAAME,KAAKD,UAI6B,CAACE,MAAAA,EAAAA,IAA1BJ,EA3BzB,SAAeK,GAKb,OAAIA,EAAMH,QACD,SAAC,KAAD,CAAUI,GAAI,cAIrB,iBAAKjB,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,UACE,gBAAKiB,IAAKC,EAAQ,MAA+BC,IAAI,gBAEvD,yEACA,6FACA,SAAC1B,EAAD,CAAgBK,SAfH,SAACsB,GAChBL,EAAMD,MAAMM,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,sGClB5D,G,QAA8B,mCAA9B,EAAwE,4B,+CCIlEC,EAAc,SAAC,GAAmD,EAAlDC,MAAmD,IAAD,IAA3CC,KAAOC,EAAoC,EAApCA,QAAS9B,EAA2B,EAA3BA,MAAQ+B,EAAmB,EAAnBA,SAC7CC,EAAWF,GAAW9B,EAE5B,OACE,iBAAKE,UAAS,UAAKC,EAAL,YAAsB6B,GAAY7B,GAAhD,UACG4B,EACAC,IAAY,0BAAOhC,QAKbiC,EAAW,SAACf,GACvB,IAAOU,EAA6BV,EAA7BU,MAAgBM,GAAahB,EAAtBW,MAAd,OAAoCX,EAApC,IACA,OAAO,SAACS,GAAD,kBAAiBT,GAAjB,cAAwB,uCAAcU,GAAWM,QAG7C1B,EAAQ,SAACU,GACpB,IAAOU,EAA6BV,EAA7BU,MAAgBM,GAAahB,EAAtBW,MAAd,OAAoCX,EAApC,IACA,OAAO,SAACS,GAAD,kBAAiBT,GAAjB,cAAwB,oCAAWU,GAAWM,S,sGCvBhD,IAAMvB,EAAW,SAACwB,GACvB,OAAOA,OAAQC,EAAY,sBAGhBzC,EAAmB,SAAC0C,GAAD,OAAuB,SAACF,GACtD,OAAOA,EAAMG,QAAUD,OAAYD,EAA5B,mCAAoEC,EAApE,eAGIE,EAAY,SAACJ,GACxB,OAAOA,OAAQC,EAAY,wB","sources":["webpack://samurai-way/./src/components/Login/LoginPage.module.css?5896","webpack://samurai-way/./src/components/Login/LoginForm/LoginForm.module.css?1b2c","components/Login/LoginForm/LoginForm.tsx","components/Login/LoginPage.tsx","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.tsx","utils/validators/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"LoginPage_login__PdZSQ\",\"login__wallpaper\":\"LoginPage_login__wallpaper__FCjhn\"};","// extracted by mini-css-extract-plugin\nexport default {\"loginForm__summaryError\":\"LoginForm_loginForm__summaryError__AuQHf\"};","import React from 'react';\r\nimport s from './LoginForm.module.css'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../../common/FormControls/FormControls';\r\nimport {maxLengthCreator, required} from '../../../utils/validators';\r\n\r\n\r\nexport type FormDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n}\r\n\r\n\r\nconst maxLength12 = maxLengthCreator(30)\r\n\r\n\r\nfunction LoginForm({handleSubmit, error}: InjectedFormProps<FormDataType>) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className={s.loginForm__login}>\r\n        <Field\r\n          type=\"login\"\r\n          placeholder={'Login'}\r\n          component={Input}\r\n          name={'email'}\r\n          validate={[required, maxLength12]}\r\n        />\r\n      </div>\r\n      <div className={s.loginForm__password}>\r\n        <Field\r\n          type=\"password\"\r\n          placeholder={'Password'}\r\n          component={Input}\r\n          name={'password'}\r\n          validate={[required, maxLength12]}\r\n        />\r\n      </div>\r\n      <div className={s.loginForm__rememberMe}>\r\n        <Field\r\n          type=\"checkbox\"\r\n          component={'input'}\r\n          name={'rememberMe'}\r\n        />\r\n        <span>remember me</span>\r\n      </div>\r\n      {error && <div className={s.loginForm__summaryError}>{error}</div>}\r\n      <div className={s.loginForm__button}>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport const LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)","import React from 'react';\r\nimport s from './LoginPage.module.css'\r\nimport {FormDataType, LoginReduxForm} from './LoginForm/LoginForm';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n  login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\ntype LoginPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nfunction Login(props: LoginPropsType) {\r\n  const onSubmit = (formData: FormDataType) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe)\r\n  }\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={'/profile'}/>\r\n  }\r\n\r\n  return (\r\n    <div className={s.login}>\r\n      <div className={s.login__wallpaper}>\r\n        <img src={require('../../assets/img/moria.jpg')} alt=\"main-img\"/>\r\n      </div>\r\n      <p>Ennyn Durin Aran Moria: pedo mellon a minno.</p>\r\n      <p>Im Narvi hain echant: Celebrimbor o Eregion teithant i thiw hin.</p>\r\n      <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport const LoginPage = connect(mapStateToProps, {login})(Login)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__Hoa5K\",\"error\":\"FormControls_error__SBDrb\"};","import React from 'react';\r\nimport s from './FormControls.module.css'\r\nimport {Field} from 'redux-form';\r\n\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}: any) => {\r\n  const hasError = touched && error\r\n\r\n  return (\r\n    <div className={`${s.formControl} ${hasError && s.error}`}>\r\n      {children}\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n  const {input, meta, ...restProps} = props\r\n  return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n  const {input, meta, ...restProps} = props\r\n  return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (type: string, placeholder: string, component: any, name: string, validators: Array<any>, props: {}, text: string) => {\r\n  return <div><Field\r\n    type={type}\r\n    placeholder={placeholder}\r\n    component={component}\r\n    name={name}\r\n    validate={validators}\r\n    {...props}\r\n  /> {text}</div>\r\n}","export const required = (value: string) => {\r\n  return value ? undefined : 'Field is required!'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  return value.length <= maxLength ? undefined : `Max length of message is ${maxLength} symbols!`\r\n}\r\n\r\nexport const minLength = (value: string) => {\r\n  return value ? undefined : 'Enter your message!'\r\n}"],"names":["maxLength12","maxLengthCreator","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","className","s","Field","type","placeholder","component","Input","name","validate","required","LoginPage","connect","state","isAuth","auth","login","props","to","src","require","alt","formData","email","password","rememberMe","FormControl","input","meta","touched","children","hasError","Textarea","restProps","value","undefined","maxLength","length","minLength"],"sourceRoot":""}