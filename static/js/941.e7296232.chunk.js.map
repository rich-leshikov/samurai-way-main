{"version":3,"file":"static/js/941.e7296232.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css?c3a9","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css?9ff0","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.module.css","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileContact/ProfileContact.module.css?8a2c","components/Profile/ProfileInfo/ProfileContact/ProfileContact.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.tsx","components/common/MessageForm/MessageForm.module.css","components/common/MessageForm/MessageForm.tsx","hoc/withAuthRedirect.tsx","utils/validators/index.ts","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__xNJNh\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__8URru\",\"profile__wallpaper\":\"ProfileInfo_profile__wallpaper__cfdA5\",\"profile__description\":\"ProfileInfo_profile__description__m4Ak1\",\"profile__description__avatar\":\"ProfileInfo_profile__description__avatar__0TNgY\",\"profile__description__info\":\"ProfileInfo_profile__description__info__6nuYX\",\"profile__description__info__status\":\"ProfileInfo_profile__description__info__status__+qlmr\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileStatus\":\"ProfileStatus_profileStatus__S11lX\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileStatus.module.css'\r\nimport {ThunkType} from '../../../../redux/redux-store';\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n  status: string\r\n  changeStatus: (status: string) => ThunkType\r\n}\r\n\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const [status, changeStatus] = useState<string>(props.status)\r\n\r\n  useEffect(() => {\r\n    changeStatus(props.status)\r\n  }, [props.status])\r\n\r\n  const activateEditMode = () => setEditMode(true)\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false)\r\n    props.changeStatus(status)\r\n  }\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => changeStatus(e.currentTarget.value)\r\n\r\n  return (\r\n    <span className={s.profileStatus}>\r\n      {\r\n        !editMode && <p onDoubleClick={activateEditMode}>{status}</p>\r\n      }\r\n      {\r\n        editMode &&\r\n        <input\r\n          autoFocus={true}\r\n          onChange={(e) => onStatusChange(e)}\r\n          onBlur={deactivateEditMode}\r\n          value={status}\r\n        />\r\n      }\r\n    </span>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"profileDataForm\":\"ProfileDataForm_profileDataForm__qsKbY\",\"profileContact\":\"ProfileDataForm_profileContact__U0DhU\",\"formButton\":\"ProfileDataForm_formButton__XtLq4\",\"formSummaryError\":\"ProfileDataForm_formSummaryError__mCk-O\"};","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\n\r\nimport {createField, Input, Textarea} from '../../../common/FormControls/FormControls';\r\n\r\nimport s from './ProfileDataForm.module.css'\r\n\r\nimport {ProfileType} from '../../../../redux/profile-reducer';\r\n\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n}\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({\r\n                                                                                            handleSubmit,\r\n                                                                                            profile,\r\n                                                                                            error\r\n                                                                                          }) => {\r\n  return (\r\n    <form\r\n      className={s.profileDataForm}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      {/*{error && <div className={s.formSummaryError}>{error}</div>}*/}\r\n      <div className={s.formSummaryError}>{error}</div>\r\n      <div>\r\n        <strong>Looking for a job: </strong>\r\n        {\r\n          createField('', 'lookingForAJob',\r\n            [], Input, ' ', {type: 'checkbox'})\r\n        }\r\n      </div>\r\n      <div>\r\n        <strong>My professional skills: </strong>\r\n        {\r\n          createField('My professional skills', 'lookingForAJobDescription',\r\n            [], Textarea, ' ', {type: 'textarea'})\r\n        }\r\n      </div>\r\n      <div>\r\n        <strong>About me: </strong>\r\n        {\r\n          createField('About me', 'aboutMe',\r\n            [], Textarea, ' ', {type: 'textarea'})\r\n        }\r\n      </div>\r\n      <div>\r\n        <strong>Contacts:</strong>\r\n        {\r\n          Object.keys(profile.contacts).map(key => {\r\n            return (\r\n              <div key={key} className={s.profileContact}>\r\n                <strong>{key}: {\r\n                  createField(key, 'contacts.' + key, [], Input)\r\n                }</strong>\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n      <div>\r\n        <div className={s.formButton}>\r\n          <button>Save changes</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>(\r\n  {form: 'edit-profile'}\r\n)(ProfileDataForm)","// extracted by mini-css-extract-plugin\nexport default {\"profileData\":\"ProfileData_profileData__TaCIn\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileContact\":\"ProfileContact_profileContact__qC-yL\"};","import React from 'react';\r\nimport s from './ProfileContact.module.css'\r\n\r\n\r\ntype ProfileContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\n\r\n\r\nexport function ProfileContact({contactTitle, contactValue, ...props}: ProfileContactPropsType) {\r\n  return (\r\n    <div className={s.profileContact}>\r\n      <strong>{contactTitle}: </strong>{contactValue}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport s from './ProfileData.module.css'\r\nimport {ProfileContact} from '../ProfileContact/ProfileContact';\r\nimport {ContactsType} from '../../../../redux/profile-reducer';\r\n\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: any\r\n  isOwner: boolean\r\n  editMode: boolean\r\n  setEditMode: (isEditMode: boolean) => void\r\n}\r\n\r\n\r\nexport function ProfileData({profile, isOwner, editMode, setEditMode, ...props}: ProfileDataPropsType) {\r\n  return (\r\n    <div className={s.profileData}>\r\n      {\r\n        isOwner &&\r\n        <div>\r\n          <button onClick={() => setEditMode(editMode)}>Edit profile</button>\r\n        </div>\r\n      }\r\n      <div>\r\n        <strong>Looking for a job: </strong>\r\n        {profile.lookingForAJob ? 'yes' : 'no'}\r\n      </div>\r\n      {\r\n        profile.lookingForAJob &&\r\n        <div>\r\n          <strong>My professional skills:</strong>\r\n          {profile.lookingForAJobDescription}\r\n        </div>\r\n      }\r\n      <div>\r\n        <strong>About me: </strong>\r\n        {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <strong>Contacts: </strong>\r\n        {\r\n          Object.keys(profile.contacts).map(key => {\r\n            return (\r\n              <ProfileContact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ThunkType} from '../../../redux/redux-store';\r\nimport {ProfileStatus} from './ProfileStatus/ProfileStatus';\r\nimport {ProfileDataFormReduxForm} from './ProfileDataForm/ProfileDataForm';\r\nimport {ProfileData} from './ProfileData/ProfileData';\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\n\r\ntype ProfileInfoPropsType = {\r\n  profile: ProfileType\r\n  fullName: string\r\n  status: string\r\n  isOwner: boolean\r\n  changeStatus: (status: string) => ThunkType\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport function ProfileInfo({profile, ...props}: ProfileInfoPropsType) {\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files) {\r\n      props.savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n  const onSubmit = (formData: ProfileType) => {\r\n    props.saveProfile(formData).then(() => {\r\n      setEditMode(false)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className={s.profileInfo}>\r\n      <div className={s.profile__description}>\r\n        <div className={s.profile__description__avatar}>\r\n          <img src={profile.photos.small ?\r\n            profile.photos.small :\r\n            require('../../../assets/img/no_data_avatar.png')} alt={'avatar'}/>\r\n          {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n        </div>\r\n        <div className={s.profile__description__info}>\r\n          <h2>{props.fullName}</h2>\r\n          <div className={s.profile__description__info__status}>\r\n            <strong>Thinking about: </strong>\r\n            <ProfileStatus\r\n              status={props.status}\r\n              changeStatus={props.changeStatus}\r\n            />\r\n          </div>\r\n          {\r\n            editMode\r\n              ? <ProfileDataFormReduxForm\r\n                initialValues={profile}\r\n                profile={profile}\r\n                onSubmit={onSubmit}\r\n              />\r\n              : <ProfileData\r\n                profile={profile}\r\n                isOwner={true}\r\n                editMode={editMode}\r\n                setEditMode={() => setEditMode(true)}\r\n              />\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"profile__posts\":\"MyPosts_profile__posts__urzsr\"};","// extracted by mini-css-extract-plugin\nexport default {\"profile__post\":\"Post_profile__post__sdmpD\",\"avatar\":\"Post_avatar__2MnBk\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n  message: string\r\n  likesCount: number\r\n  profile: any\r\n}\r\n\r\nexport function Post(props: PostPropsType) {\r\n  return (\r\n    <div className={s.profile__post}>\r\n      <img className={s.avatar} src={props.profile.photos.small ?\r\n        props.profile.photos.small : require(\"../../../../assets/img/no_data_avatar.png\")} alt='no_data'/>\r\n      <p>{props.message}</p>\r\n      <div className=\"\">\r\n        <span>like {props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post';\r\nimport {MessageDataType, MessageReduxForm} from '../../common/MessageForm/MessageForm';\r\nimport {PostType} from '../../../redux/profile-reducer';\r\n\r\n\r\nexport type MyPostsPropsType = {\r\n  posts: Array<PostType>\r\n  profile: any\r\n  addPost: (postText: string) => void\r\n}\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n  const addPost = (formData: MessageDataType) => props.addPost(formData.message)\r\n\r\n  return (\r\n    <div className={s.profile__posts}>\r\n      <h3>My posts</h3>\r\n      <div className=\"profile__new-post\">\r\n        <MessageReduxForm onSubmit={addPost}/>\r\n      </div>\r\n      <div className=\"profile__posts-feed\">\r\n        {\r\n          [...props.posts]\r\n            .reverse()\r\n            .map(p => (\r\n            <Post\r\n              key={p.id}\r\n              message={p.message}\r\n              likesCount={p.likesCount}\r\n              profile={props.profile}\r\n            />))\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n})","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPosts} from './MyPosts/MyPosts';\r\nimport {ProfilePageType, ProfileType} from '../../redux/profile-reducer';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\nimport {ThunkType} from '../../redux/redux-store';\r\nimport {FormDataType} from '../Login/LoginForm/LoginForm';\r\n\r\n\r\ntype ProfilePropsType = ProfilePageType & {\r\n  isOwner: boolean\r\n  addPost: (postText: string) => void\r\n  changeStatus: (status: string) => ThunkType\r\n  savePhoto: (file: any) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\n\r\nexport function Profile(props: ProfilePropsType) {\r\n  if (!props.profile) {\r\n    return <Preloader/>\r\n  }\r\n\r\n  return (\r\n    <div className={s.profile}>\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        fullName={props.fullName}\r\n        status={props.status}\r\n        isOwner={props.isOwner}\r\n        changeStatus={props.changeStatus}\r\n        savePhoto={props.savePhoto}\r\n        saveProfile={props.saveProfile}\r\n      />\r\n      <MyPosts\r\n        profile={props.profile}\r\n        posts={props.posts}\r\n        addPost={props.addPost}\r\n      />\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Profile} from './Profile';\r\nimport {\r\n  addPost,\r\n  ProfilePageType,\r\n  getProfile,\r\n  getStatus,\r\n  changeStatus,\r\n  savePhoto,\r\n  getFullName,\r\n  saveProfile, ProfileType\r\n} from '../../redux/profile-reducer';\r\nimport {AppStateType, ThunkType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {WithAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype MapStatePropsType = ProfilePageType & {\r\n  id: number | null\r\n  isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n  getProfile: (userId: string) => void\r\n  getFullName: (userId: string) => void\r\n  getStatus: (userId: string) => void\r\n  addPost: () => void\r\n  changeStatus: (status: string) => ThunkType\r\n  savePhoto: (file: any) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\ntype ProfilePropsType = MapStatePropsType &\r\n  MapDispatchPropsType &\r\n  RouteComponentProps<PathParamsType>\r\n\r\n\r\nclass ProfileAPIContainer extends React.Component<ProfilePropsType> {\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId\r\n\r\n    if (!userId && this.props.id) {\r\n      userId = this.props.id.toString()\r\n      if (!userId) {\r\n        this.props.history.push('/login')\r\n      }\r\n    }\r\n\r\n    this.props.getProfile(userId)\r\n    this.props.getFullName(userId)\r\n    this.props.getStatus(userId)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n    if (prevProps.id && (this.props.match.params.userId !== prevProps.match.params.userId)) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        isOwner={!this.props.match.params.userId}\r\n        addPost={this.props.addPost}\r\n        changeStatus={this.props.changeStatus}\r\n        savePhoto={this.props.savePhoto}\r\n        saveProfile={this.props.saveProfile}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n  posts: state.profilePage.posts,\r\n  profile: state.profilePage.profile,\r\n  fullName: state.profilePage.fullName,\r\n  status: state.profilePage.status,\r\n  id: state.auth.id,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const ProfileContainer = compose<React.ComponentType>(\r\n  WithAuthRedirect,\r\n  withRouter,\r\n  connect(mapStateToProps, {\r\n    addPost,\r\n    getProfile,\r\n    getStatus,\r\n    getFullName,\r\n    changeStatus,\r\n    savePhoto,\r\n    saveProfile\r\n  })\r\n)(ProfileAPIContainer)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__Hoa5K\",\"error\":\"FormControls_error__SBDrb\"};","import React from 'react';\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\n\r\nimport s from './FormControls.module.css'\r\nimport {FieldValidatorType} from '../../../utils/validators';\r\n\r\n\r\ntype FormControlPropsType = {\r\n  meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n  const hasError = touched && error\r\n\r\n  return (\r\n    <div className={`${s.formControl} ${hasError && s.error}`}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = props => {\r\n  const {input, meta, ...restProps} = props\r\n  return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = props => {\r\n  const {input, meta, ...restProps} = props\r\n  return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (\r\n  placeholder: string | undefined,\r\n  name: string,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<WrappedFieldProps>,\r\n  text?: ' ',\r\n  props?: {}\r\n) => {\r\n  return (\r\n    <div>\r\n      <Field\r\n        placeholder={placeholder}\r\n        component={component}\r\n        name={name}\r\n        validate={validators}\r\n        {...props}\r\n      /> {text}</div>\r\n  )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\r\nimport s from './MessageForm.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, minLength} from '../../../utils/validators';\r\nimport {Textarea} from '../FormControls/FormControls';\r\n\r\n\r\nexport type MessageDataType = {\r\n  message: string\r\n}\r\n\r\n\r\nconst maxLength140 = maxLengthCreator(140)\r\n\r\n\r\nfunction MessageForm(props: InjectedFormProps<MessageDataType>) {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={s.messageForm__textarea}>\r\n        <Field\r\n          type='message'\r\n          placeholder={'your message...'}\r\n          component={Textarea}\r\n          name={'message'}\r\n          validate={[minLength, maxLength140]}\r\n        />\r\n      </div>\r\n      <div className={s.messageForm__button}>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport const MessageReduxForm = reduxForm<MessageDataType>({form: 'message'})(MessageForm)","import React, {ComponentType} from 'react';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n  const RedirectComponent = (props: MapStatePropsType) => {\r\n    let {isAuth, ...restProps} = props\r\n\r\n    if (!isAuth) {\r\n      return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <Component {...restProps as T}/>\r\n  }\r\n\r\n  return connect(mapStateToProps)(RedirectComponent)\r\n}","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required = (value: string) => {\r\n  return value ? undefined : 'Field is required!'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  return value.length <= maxLength ? undefined : `Max length of message is ${maxLength} symbols!`\r\n}\r\n\r\nexport const minLength = (value: string) => {\r\n  return value ? undefined : 'Enter your message!'\r\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatus","props","useState","editMode","setEditMode","status","changeStatus","useEffect","className","s","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onStatusChange","onBlur","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","createField","Input","type","Textarea","Object","keys","contacts","map","key","ProfileContact","contactTitle","contactValue","ProfileData","isOwner","onClick","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","src","photos","small","require","alt","target","files","savePhoto","fullName","initialValues","formData","saveProfile","then","Post","message","likesCount","MyPosts","React","addPost","posts","reverse","p","id","Profile","Preloader","ProfileAPIContainer","userId","this","match","params","toString","history","push","getProfile","getFullName","getStatus","refreshProfile","prevProps","prevState","snapshot","ProfileContainer","compose","WithAuthRedirect","withRouter","connect","state","profilePage","auth","isAuth","FormControl","meta","touched","children","hasError","input","restProps","placeholder","name","validators","component","text","Field","validate","maxLength140","maxLengthCreator","MessageReduxForm","minLength","mapStateToProps","Component","to","required","undefined","maxLength","length","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}