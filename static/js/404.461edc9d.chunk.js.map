{"version":3,"file":"static/js/404.461edc9d.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/Dialog/Dialog.module.css?19be","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.tsx","components/common/MessageForm/MessageForm.module.css","components/common/MessageForm/MessageForm.tsx","hoc/withAuthRedirect.tsx","utils/validators/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__REjYx\",\"dialogs__items\":\"Dialogs_dialogs__items__X2L6h\",\"dialogs__chats\":\"Dialogs_dialogs__chats__j-yR-\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialog_dialog__E1rex\",\"active\":\"Dialog_active__dJSxg\"};","import React from 'react';\r\nimport s from './Dialog.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogPropsType = {\r\n  id: string,\r\n  name: string\r\n}\r\n\r\nexport function Dialog(props: DialogPropsType) {\r\n  return (\r\n    <div className={`${s.dialog} ${s.active}`}>\r\n      <NavLink to={`/dialogs/${props.id}`} activeClassName={s.active}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n  id: string,\r\n  message: string\r\n}\r\n\r\nexport function Message(props: MessagePropsType) {\r\n  return (\r\n    <div className={s.message}>{props.message}</div>\r\n  );\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {addMessage, DialogsPageType} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {WithAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype MapStatePropsType = DialogsPageType\r\ntype MapDispatchPropsType = {\r\n  addMessage: (message: string) => void\r\n}\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages\r\n  }\r\n}\r\n\r\n\r\nexport const DialogsContainer = compose<React.ComponentType>(\r\n  WithAuthRedirect,\r\n  connect(mapStateToProps, {\r\n    addMessage\r\n  })\r\n)(Dialogs)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {Dialog} from './Dialog/Dialog';\r\nimport {Message} from './Message/Message';\r\nimport {MessageDataType, MessageReduxForm} from '../common/MessageForm/MessageForm';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\n\r\n\r\nexport function Dialogs(props: DialogsPropsType) {\r\n  const addMessage = (formData: MessageDataType) => {\r\n    props.addMessage(formData.message)\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogs__items}>\r\n        {\r\n          props.dialogs.map(d => <Dialog key={d.id} id={d.id} name={d.name}/>)\r\n        }\r\n      </div>\r\n      <div className={s.dialogs__chats}>\r\n        {\r\n          props.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\r\n        }\r\n        <MessageReduxForm onSubmit={addMessage}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__Hoa5K\",\"error\":\"FormControls_error__SBDrb\"};","import React from 'react';\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\n\r\nimport s from './FormControls.module.css'\r\nimport {FieldValidatorType} from '../../../utils/validators';\r\n\r\n\r\ntype FormControlPropsType = {\r\n  meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n  const hasError = touched && error\r\n\r\n  return (\r\n    <div className={`${s.formControl} ${hasError && s.error}`}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = props => {\r\n  const {input, meta, ...restProps} = props\r\n  return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = props => {\r\n  const {input, meta, ...restProps} = props\r\n  return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (\r\n  placeholder: string | undefined,\r\n  name: string,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<WrappedFieldProps>,\r\n  text?: ' ',\r\n  props?: {}\r\n) => {\r\n  return (\r\n    <div>\r\n      <Field\r\n        placeholder={placeholder}\r\n        component={component}\r\n        name={name}\r\n        validate={validators}\r\n        {...props}\r\n      /> {text}</div>\r\n  )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\r\nimport s from './MessageForm.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, minLength} from '../../../utils/validators';\r\nimport {Textarea} from '../FormControls/FormControls';\r\n\r\n\r\nexport type MessageDataType = {\r\n  message: string\r\n}\r\n\r\n\r\nconst maxLength140 = maxLengthCreator(140)\r\n\r\n\r\nfunction MessageForm(props: InjectedFormProps<MessageDataType>) {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={s.messageForm__textarea}>\r\n        <Field\r\n          type='message'\r\n          placeholder={'your message...'}\r\n          component={Textarea}\r\n          name={'message'}\r\n          validate={[minLength, maxLength140]}\r\n        />\r\n      </div>\r\n      <div className={s.messageForm__button}>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport const MessageReduxForm = reduxForm<MessageDataType>({form: 'message'})(MessageForm)","import React, {ComponentType} from 'react';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n  const RedirectComponent = (props: MapStatePropsType) => {\r\n    let {isAuth, ...restProps} = props\r\n\r\n    if (!isAuth) {\r\n      return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <Component {...restProps as T}/>\r\n  }\r\n\r\n  return connect(mapStateToProps)(RedirectComponent)\r\n}","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required = (value: string) => {\r\n  return value ? undefined : 'Field is required!'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  return value.length <= maxLength ? undefined : `Max length of message is ${maxLength} symbols!`\r\n}\r\n\r\nexport const minLength = (value: string) => {\r\n  return value ? undefined : 'Enter your message!'\r\n}"],"names":["Dialog","props","className","s","to","id","activeClassName","name","Message","message","DialogsContainer","compose","WithAuthRedirect","connect","state","dialogs","dialogsPage","messages","addMessage","map","d","m","onSubmit","formData","FormControl","meta","touched","error","children","hasError","Textarea","input","restProps","Input","createField","placeholder","validators","component","text","Field","validate","maxLength140","maxLengthCreator","MessageReduxForm","reduxForm","form","handleSubmit","type","minLength","mapStateToProps","isAuth","auth","Component","required","value","undefined","maxLength","length"],"sourceRoot":""}