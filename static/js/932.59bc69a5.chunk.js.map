{"version":3,"file":"static/js/932.59bc69a5.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Login/LoginPage.module.css?5896","webpack://samurai-way/./src/components/Login/LoginForm/LoginForm.module.css?1b2c","components/Login/LoginForm/LoginForm.tsx","components/Login/LoginPage.tsx","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.tsx","utils/validators/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"LoginPage_login__PdZSQ\",\"login__wallpaper\":\"LoginPage_login__wallpaper__FCjhn\"};","// extracted by mini-css-extract-plugin\nexport default {\"loginForm__summaryError\":\"LoginForm_loginForm__summaryError__AuQHf\"};","import React from 'react';\r\nimport s from './LoginForm.module.css'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, Input} from '../../common/FormControls/FormControls';\r\nimport {maxLengthCreator, required} from '../../../utils/validators';\r\n\r\n\r\nexport type FormDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string\r\n}\r\nexport type LoginFormPropsType = {\r\n  captchaUrl: string | null\r\n}\r\n\r\n\r\nconst maxLength12 = maxLengthCreator(30)\r\n\r\n\r\nfunction LoginForm({\r\n                     handleSubmit,\r\n                     error,\r\n                     captchaUrl\r\n                   }: InjectedFormProps<FormDataType, LoginFormPropsType> & LoginFormPropsType) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className={s.loginForm__login}>\r\n        <Field\r\n          type=\"login\"\r\n          placeholder={'Login'}\r\n          component={Input}\r\n          name={'email'}\r\n          validate={[required, maxLength12]}\r\n        />\r\n      </div>\r\n      <div className={s.loginForm__password}>\r\n        <Field\r\n          type=\"password\"\r\n          placeholder={'Password'}\r\n          component={Input}\r\n          name={'password'}\r\n          validate={[required, maxLength12]}\r\n        />\r\n      </div>\r\n      <div className={s.loginForm__rememberMe}>\r\n        <Field\r\n          type=\"checkbox\"\r\n          component={'input'}\r\n          name={'rememberMe'}\r\n        />\r\n        <span>remember me</span>\r\n      </div>\r\n      {captchaUrl && <img src={captchaUrl} alt={'captcha'}/>}\r\n      {captchaUrl && createField('Symbols from image', 'captcha', [required], Input, ' ', {})}\r\n      {error && <div className={s.loginForm__summaryError}>{error}</div>}\r\n      <div className={s.loginForm__button}>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport const LoginReduxForm = reduxForm<FormDataType, LoginFormPropsType>({form: 'login'})(LoginForm)","import React from 'react';\r\nimport s from './LoginPage.module.css'\r\nimport {FormDataType, LoginReduxForm} from './LoginForm/LoginForm';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n  captchaUrl: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n  login: (email: string, password: string, rememberMe: boolean, captchaUrl: string) => void\r\n}\r\ntype LoginPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nfunction Login(props: LoginPropsType) {\r\n  const onSubmit = (formData: FormDataType) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n  }\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={'/profile'}/>\r\n  }\r\n\r\n  return (\r\n    <div className={s.login}>\r\n      <div className={s.login__wallpaper}>\r\n        <img src={require('../../assets/img/moria.jpg')} alt=\"main-img\"/>\r\n      </div>\r\n      <p>Get out of here, stalker.</p>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n  captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\n\r\nexport const LoginPage = connect(mapStateToProps, {login})(Login)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__Hoa5K\",\"error\":\"FormControls_error__SBDrb\"};","import React from 'react';\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\n\r\nimport s from './FormControls.module.css'\r\nimport {FieldValidatorType} from '../../../utils/validators';\r\n\r\n\r\ntype FormControlPropsType = {\r\n  meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n  const hasError = touched && error\r\n\r\n  return (\r\n    <div className={`${s.formControl} ${hasError && s.error}`}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = props => {\r\n  const {input, meta, ...restProps} = props\r\n  return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = props => {\r\n  const {input, meta, ...restProps} = props\r\n  return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (\r\n  placeholder: string | undefined,\r\n  name: string,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<WrappedFieldProps>,\r\n  text?: ' ',\r\n  props?: {}\r\n) => {\r\n  return (\r\n    <div>\r\n      <Field\r\n        placeholder={placeholder}\r\n        component={component}\r\n        name={name}\r\n        validate={validators}\r\n        {...props}\r\n      /> {text}</div>\r\n  )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required = (value: string) => {\r\n  return value ? undefined : 'Field is required!'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  return value.length <= maxLength ? undefined : `Max length of message is ${maxLength} symbols!`\r\n}\r\n\r\nexport const minLength = (value: string) => {\r\n  return value ? undefined : 'Enter your message!'\r\n}"],"names":["maxLength12","maxLengthCreator","LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","onSubmit","className","s","Field","type","placeholder","component","Input","name","validate","required","src","alt","createField","LoginPage","connect","state","isAuth","auth","login","props","to","require","formData","email","password","rememberMe","captcha","FormControl","meta","touched","children","hasError","Textarea","input","restProps","validators","text","value","undefined","maxLength","length","minLength"],"sourceRoot":""}